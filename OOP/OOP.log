OOP - Object Oriented programming

Step 1: Abstraction
    - focus on important details
    - Unwanted features are left out

Step 2: Encapsilation 
    - hides the implementation details of a class
    - Objects of these classes are easy to use
    - internal implementation can be chaged eithout the users knowledge
    - implemented though access modifiers (public, private, and protected)
    +---------------+-----------------------+--------------------------+--------------------------+
    |               |                                 Derived class                               |
    +---------------+-----------------------+--------------------------+--------------------------+
    | Base class    | base : public derived | base : private derivede  | base : protected derived |
    +---------------+-----------------------+--------------------------+--------------------------+
    | private       | Not inherited         | Not inherited            | Not inherited            |
    | protected     | protected             | private                  | protected                |
    | public        | public                | private                  | protected                |
    +---------------+-----------------------+--------------------------+--------------------------+

Step 3: Inheritance
    - hierarchy of classes
    - behavior is given to derived classes from base class

Step 4: Composition
    - signifies relationship between Objects
    - represented as "has-a" or "part-of" relationship
        - eg. car has a engine

Step 5: Polymorphism
    - one Object with different forms
    - common behavior with different implementation
        - eg. car, person, plane all move but move differently
    - implemented though function overloading, remplates and virtual functions
    - Internals
        - Different forms of the fuction are aprovided
        - the call is resolved at compile time or runtime
        - runtime Polymorphism or dynamic bindingj
        - implementation thoght virtual mechanism
        -compiler inserts code to invoke the correct fucntion at runtime
        - such functions are called Polymorphic functions
        - should be invoked only through a pointer or reference

 VTable and VPtr
    - use of virtual keyword will make the compiler generate a Virtual 
        table of fucntion pointers.
    Vtable contains address of virtual functions. each taking 4 bytes
    Non-virtual funcitons do not appear in the Vtable
    The base class is automatically give a new member called a Virtual Pointer by the compiler.
        this member holds the address of the virtual table.
    When the class in inherited, the derived class will inherite the vTable and the 
        derived overriden virtual methods will replace the base method addresses.

RTTI - (Run-time type information) is a mechanism that exposes information about an objectâ€™s data type at runtime

Use of typeinfo and dynamic_cast
    adds xtra infomation to poymorphic classes
    adds type under type_info_object to each class VTable
    At runtime this info will be queried
    AVOID - WHY?
        dynamic_cast will need to run though hirachy to see if it can cast or not.
    How to avoid?
        - rely on polymorphism!

Abstract class
    - has atleast 1 pure virtual method in a class
    - cannot be instantiated but can be used through a pointer or reference
    - makes all instantiable classes implement the method
    - used to creating interfaces
    -  VTable
        - no entry in the VTable for the base class only the derived.